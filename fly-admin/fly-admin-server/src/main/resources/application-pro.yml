# 日志配置
logging:
  config: classpath:fly-cloud.xml
  level:
    cn.jay.repository: trace

auth:
  serviceId: auth # auth server name
  client:
    id: ${spring.application.name}
    secret: 123456

spring:
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true

  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

  redis:
    database: 2
    host: 127.0.0.1

  cloud:
    loadbalancer:
      cache:
        ttl: 5s # 35s
        # enabled: false
    alibaba:
      ## 分布式事务 seata 配置
      seata:
        tx-service-group: itdachen_tx_group

    ## 向 nacos 发起注册
    nacos:
      discovery:
        enabled: true # 如果不想使用 Nacos 进行服务注册和发现, 设置为 false 即可
        server-addr: 153.12.72.167:8848
        namespace: 07656b3c-bb69-470a-a942-6ae27b5287cb
        group: DEFAULT_GROUP
        metadata:
          management:
            context-path: ${server.servlet.context-path}/actuator
          preserved:
            heart:
              beat:
                interval: 3000
                timeout: 3000
            ip:
              delete:
                timeout: 5000

  datasource:
    name: Oracle
    driver-class-name: oracle.jdbc.OracleDriver
    type: com.zaxxer.hikari.HikariDataSource
    #  url: jdbc:oracle:thin:@192.168.94.28:1521:orcl
    url: jdbc:oracle:thin:@127.0.0.1:1521:orcl
    username: Hubu1024
    password: Hubu1024
    hikari:
      #连接池最大连接数，默认是10
      maximum-pool-size: 8
      #最小空闲连接数量
      minimum-idle: 4
      #空闲连接存活最大时间，默认600000（10分钟）
      idle-timeout: 30000
      #数据库连接超时时间,默认30秒，即30000
      connection-timeout: 30000
      #连接测试查询
      connection-test-query: select 1 from dual
      #此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
      max-lifetime: 45000
      #此属性控制从池返回的连接的默认自动提交行为,默认值：true
      auto-commit: true
      validation-timeout: 5000
      leak-detection-threshold: 0
      #连接池母子
      pool-name: adminHikariPC

### zipkin 链路追踪 (线上生产环境时打开)
#  zipkin:
#    base-url: http://127.0.0.1:9411/  #server的请求地址
#    sender:
#      type: WEB #数据的传输方式 , 已http的形式向server端发送数据
#      # type: RABBIT #向 RabbitMQ 中发送消息
#    sleuth:
#      sampler:
#        probability: 0.1 #采样比  意思就是  所有的日志都收集
#      # RabbitMQ 配置, 需要本地启动 RabbitMQ
#      rabbitmq:
#        host: localhost
#        port: 5672
#        username: guest
#        password: guest
#        listener: # 这里配置了重试策略
#          direct:
#            retry:
#              enabled: true
#          simple:
#            retry:
#              enabled: true

feign:
  httpclient:
    enabled: true
    max-connections: 200
    max-connections-per-route: 50

hystrix:
  threadpool:
    default:
      coreSize: 1000 #并发执行的最大线程数，默认10
      maxQueueSize: 1000 #BlockingQueue的最大队列数
      queueSizeRejectionThreshold: 500 #即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 110000

# mybatis
mybatis:
  type-aliases-package: com.home.**.vo
  mapperLocations: classpath*:mapper/**/*.xml
  configuration:
    map-underscore-to-camel-case: true
    call-setters-on-nulls: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# 分页工具
pagehelper:
  helperDialect: mysql
  # 超过总页数是否返回最后一页数据
  reasonable: false
  supportMethodsArguments: true
  params: count=countSql


## alibaba seata 配置
seata:
  #事务群组（可以每个应用独立取名，也可以使用相同的名字），要与服务端 nacos-config.txt 中 service.vgroup_mapping 中存在,并且要保证多个群组情况下后缀名要保持一致-tx_group
  enabled: true
  enable-auto-data-source-proxy: true #是否开启数据源自动代理,默认为true
  tx-service-group: itdachen_tx_group  #要与配置文件中的vgroupMapping一致
  # registry 根据 seata 服务端的 registry 配置
  registry:
    type: nacos #默认为file
    nacos:
      application: seata-server #配置自己的seata服务
      server-addr: ${spring.cloud.nacos.discovery.server-addr} #根据自己的seata服务配置
      username: nacos #根据自己的seata服务配置
      password: nacos #根据自己的seata服务配置
      cluster: default # 配置自己的seata服务cluster, 默认为 default
      group: SEATA_GROUP #根据自己的seata服务配置
      namespace: 33c3c9ef-0158-4b06-a4db-fbdb49c8f8cf #改为自己的nacos的namespace,这里填写的是刚才创建seata命名空间的id
  config:
    type: nacos #默认file,如果使用file不配置下面的nacos,直接配置seata.service
    nacos:
      server-addr: ${spring.cloud.nacos.discovery.server-addr} #配置自己的nacos地址
      group: SEATA_GROUP #配置自己的dev
      username: nacos #配置自己的username
      password: nacos #配置自己的password
      dataId: seataServer.properties # #配置自己的 dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好
      namespace: 33c3c9ef-0158-4b06-a4db-fbdb49c8f8cf #改为自己的 nacos 的 namespace,这里填写的是刚才创建seata命名空间的id
