# 日志配置
logging:
  config: classpath:fly-cloud.xml
  level:
    cn.jay.repository: trace

spring:
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true

  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

  cloud:
    loadbalancer:
      # 重试策略
      retry:
        maxRetriesOnSameServiceInstance: 0
        maxRetriesOnNextServiceInstance: 0
      clients:
        service-product:
          retry:
            maxRetriesOnSameServiceInstance: 0
            maxRetriesOnNextServiceInstance: 0
    #    inetutils:
    #      preferred-networks: 127.0.0.1
    ## 向 nacos 发起注册
    nacos:
      discovery:
        enabled: true # 如果不想使用 Nacos 进行服务注册和发现, 设置为 false 即可
        server-addr: 127.0.0.1:8848
        namespace: 07656b3c-bb69-470a-a942-6ae27b5287cb
        group: DEFAULT_GROUP
        metadata:
          management:
            context-path: ${server.servlet.context-path}/actuator
  #          preserved:
  #            heart:
  #              beat:
  #                interval: 3000
  #                timeout: 3000
  #            ip:
  #              delete:
  #                timeout: 5000

  datasource:
    name: oracle
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://127.0.0.1:3306/fly-next?useUnicode=true&characterEncoding=UTF8&createDatabaseIfNotExist=true&useUnicode=true&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&allowMultiQueries=true
    username: root
    password: root
    druid:
      maxActive: 20
      initialSize: 1
      maxWait: 60000
      minIdle: 1
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      poolPreparedStatements: true
      maxOpenPreparedStatements: 20
      maxPoolPreparedStatementPerConnectionSize: 20
      connectionProperties: druid:stat:mergeSql=true;druid:stat:slowSqlMillis=5000
      ########### 启用内置过滤器（第一个 stat必须，否则监控不到SQL）##########
      filters: stat,wall,log4j2
      # 自己配置监控统计拦截的filter
      filter:
        # 开启druiddatasource的状态监控
        stat:
          enabled: true
          db-type: oracle
          # 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中
          log-slow-sql: true
          slow-sql-millis: 2000
        # 日志监控，使用slf4j 进行日志输出
        slf4j:
          enabled: true
          statement-log-error-enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      ########## 配置WebStatFilter，用于采集web关联监控的数据 ##########
      web-stat-filter:
        enabled: true                   # 启动 StatFilter
        url-pattern: /*                 # 过滤所有url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" # 排除一些不必要的url
        session-stat-enable: true       # 开启session统计功能
        session-stat-max-count: 1000    # session的最大个数,默认100
      ########## 配置StatViewServlet（监控页面），用于展示Druid的统计信息 ##########
      stat-view-servlet:
        enabled: true                   # 启用StatViewServlet
        url-pattern: /biz/druid/*           # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        reset-enable: false              # 不允许清空统计数据,重新计算
        login-username: root            # 配置监控页面访问密码
        login-password: 123
        allow: 127.0.0.1           # 允许访问的地址，如果allow没有配置或者为空，则允许所有访问
        # deny:                      # 拒绝访问的地址，deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝


  thymeleaf:
    mode: HTML5
    cache: false
    encoding: utf-8

  data:
    redis:
      database: 5
      host: 127.0.0.1


### zipkin 链路追踪
#  zipkin:
#    base-url: http://127.0.0.1:9411/  #server的请求地址
#    discovery-client-enabled: false
#    sender:
#      type: WEB #数据的传输方式 , 已http的形式向server端发送数据
#      # type: RABBIT #向 RabbitMQ 中发送消息
#    sleuth:
#      sampler:
#        probability: 0.1 #采样比  意思就是  所有的日志都收集
#      # RabbitMQ 配置, 需要本地启动 RabbitMQ
#      rabbitmq:
#        host: localhost
#        port: 5672
#        username: guest
#        password: guest
#        listener: # 这里配置了重试策略
#          direct:
#            retry:
#              enabled: true
#          simple:
#            retry:
#              enabled: true



feign:
  httpclient:
    enabled: true
    max-connections: 200
    max-connections-per-route: 50

hystrix:
  threadpool:
    default:
      coreSize: 1000 #并发执行的最大线程数，默认10
      maxQueueSize: 1000 #BlockingQueue的最大队列数
      queueSizeRejectionThreshold: 500 #即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 110000

# mybatis
mybatis:
  type-aliases-package: cn.edu.hubu.**.vo
  mapperLocations: classpath*:mapper/**/*.xml
  configuration:
    map-underscore-to-camel-case: true
    call-setters-on-nulls: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# 分页工具
pagehelper:
  helperDialect: oracle
  # 超过总页数是否返回最后一页数据
  reasonable: false
  supportMethodsArguments: true
  params: count=countSql


## alibaba seata 配置
seata:
  #事务群组（可以每个应用独立取名，也可以使用相同的名字），要与服务端 nacos-config.txt 中 service.vgroup_mapping 中存在,并且要保证多个群组情况下后缀名要保持一致-tx_group
  enabled: true
  enable-auto-data-source-proxy: true #是否开启数据源自动代理,默认为true
  tx-service-group: itdachen_tx_group  #要与配置文件中的vgroupMapping一致
  # registry 根据 seata 服务端的 registry 配置
  registry:
    type: nacos #默认为file
    nacos:
      application: seata-server #配置自己的seata服务
      server-addr: ${spring.cloud.nacos.discovery.server-addr} #根据自己的seata服务配置
      username: nacos #根据自己的seata服务配置
      password: nacos #根据自己的seata服务配置
      cluster: default # 配置自己的seata服务cluster, 默认为 default
      group: SEATA_GROUP #根据自己的seata服务配置
      namespace: 33c3c9ef-0158-4b06-a4db-fbdb49c8f8cf #改为自己的nacos的namespace,这里填写的是刚才创建seata命名空间的id
  config:
    type: nacos #默认file,如果使用file不配置下面的nacos,直接配置seata.service
    nacos:
      server-addr: ${spring.cloud.nacos.discovery.server-addr} #配置自己的nacos地址
      group: SEATA_GROUP #配置自己的dev
      username: nacos #配置自己的username
      password: nacos #配置自己的password
      dataId: seataServer.properties # #配置自己的 dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好
      namespace: 33c3c9ef-0158-4b06-a4db-fbdb49c8f8cf #改为自己的 nacos 的 namespace,这里填写的是刚才创建seata命名空间的id

